defpackage stz-test-suite/dev-linker :
  import core
  import collections
  import arg-parser
  import stz/compiler-linking
  import stz/compiler-result
  import stz/proj-ir
  import stz/proj
  import stz/proj-value-types
  import stz/proj-env
  import stz/compiler-build-settings
  import stz/foreign-package-files
  import stz-test-suite/test-tools
  import stz/aux-file
  import stz/printing-utils
  import stz/linking-errors
  import stz/external-dependencies

;Uncomment these lines to force a particular action
;during development.
;set-command-line-arguments $ [
;  "dev-linker"
;  "-packages" "core/threaded-reader" "core/sha256"
;  "-proj" "ex1.proj"]

;============================================================
;================== Dummy Structures ========================
;============================================================

;Dummy package manager for Conan.
defn conan-manager-info () -> ForeignPackageManagerInfo :
  ForeignPackageManagerInfo(
    `conan,
    [TableEntry(`build-dir
                SINGLE-PATH,
                false)
     TableEntry(`config-file
                SINGLE-PATH,
                true,
                One("{.}/config"))
     TableEntry(`commands,
                MULTIPLE-STRINGS
                true)
     TableEntry(`servers,
                MultipleType $ TableType([
                  TableEntry(`name,
                             SINGLE-STRING,
                             false)
                  TableEntry(`localfile,
                             SINGLE-PATH,
                             true,
                             One("{HOME}/.localcache"))
                  TableEntry(`url,
                             SINGLE-STRING,
                             true,
                             One("server.default@main"))
                  TableEntry(`flags,
                             MULTIPLE-STRINGS,
                             true)])
                true)])

;Get the conan variables.
defn conan-vars (platform:Symbol,
                 stmt:ForeignPackageParamsStmt)
              -> Tuple<KeyValue<Symbol, ?>> :
  val build-dir = lookup(entries(stmt), `build-dir)
  val system-dir = to-string("%_/system" % [build-dir])
  val conan-root = to-string("%_/.conan" % [projdir(stmt)])
  [`conan-system-includes => system-dir
   `conan-root => conan-root]

;Retrieve a bunch of dummy package managers for testing.
defn manager-infos (names:Tuple<String>) -> Tuple<ForeignPackageManagerInfo> :
  for name in names map :
    switch(name) :
      "conan" : conan-manager-info()
      else : fatal("No dummy package manager called %~." % [name])

;Read an example proj file.
defn read-example-proj (filenames:Tuple<String>) -> ProjFile :
  val platform = `os-x ;to-symbol(get?(cmdargs, "platform", "os-x"))
  val workdir = resolve-path!(".")
  val env = new ProjEnv :
    defmethod workdir (this) :
      workdir
    defmethod foreign-package-managers (this) :
      manager-infos(["conan"])
      ;manager-infos(get?(cmdargs, "package-managers", []))
    defmethod package-manager-variables (this, params:ForeignPackageParamsStmt, platform:Symbol) :
      switch(package-manager(params)) :
        `conan : conan-vars(platform, params)
  read-proj-files(filenames, platform, env)

defn LinkEnv () :
  new LinkerEnv :
    defmethod issue-error (this, err:LinkingError) -> False :
      println("Error occurred during linking:")
      println(Indented(err))

    ;Return the system dependencies that usages of a foreign-package-manager
    ;will induce. Note that foreign-packages are not allowed here, only ccfiles and ccflags.
    defmethod foreign-package-manager-dependencies (this,
                                                    params:ForeignPackageParamsStmt,
                                                    platform:Symbol)
                                                 -> ProjDependencies :
      println("Requesting dependencies of:")
      println(Indented(params))
      ProjDependencies([], [], [])

    ;Report to the caller that the external dependencies have been computed.
    defmethod computed-dependencies (this, deps:ProjDependencies) -> False :
      println("Finished computing all dependencies:")
      println(Indented(deps))

    ;Report to the caller that build commands have been computed.
    defmethod computed-build-commands (this, stmts:Tuple<CompileStmt>) -> False :
      println("Finished computing all build commands:")
      do(println, seq(Indented, stmts))

    ;Called to request for the given foreign package dependencies to be satisfied.
    ;If an error occurs, and the request cannot be satisfied, this call is expected to throw an exception,
    ;which will halt the compilation process.
    ;The function should return True if progress has been made, or false if the dependencies
    ;were already up-to-date and have not changed since they were last satisfied.
    defmethod satisfy-foreign-packages (this,
                                        files:ForeignPackageFiles,
                                        params:ForeignPackageParamsStmt,
                                        platform:Symbol) -> True|False :
      println("Simulate satisfying package dependencies:")
      println(Indented(files))

    ;Called to report to the caller that an external dependency has already been built.
    defmethod notify-external-dependency-up-to-date (this, file?:True|False, name:String) -> False :
      val file-str = "file" when file? else "flag"
      println("External dependency is up to date: %_ %~" % [file-str, name])

    ;Called to request that the caller execute a build command.
    ;Expected to throw an exception if some error occurs during execution.
    defmethod call-shell (this, platform:Symbol, command:String) -> False :
      println("Simulate calling shell on platform %_: %~" % [platform, command])

    ;Called to request that the caller calls the C compiler to build the given exefile.
    ;Expected to return true if the operation succeeds, or false otherwise.
    defmethod call-cc (this,
                       platform:Symbol,
                       asm:String,
                       ccfiles:Tuple<String>,
                       ccflags:Tuple<String>,
                       exefile:String) -> True|False :
      val items = [
        simple-field("platform", platform)
        simple-field("asm", asm)
        named-emptyable-list-fields("ccfiles", seq(written,ccfiles))
        named-emptyable-list-fields("ccflags", seq(written,ccflags))
        simple-field("exefile", exefile)]
      println("Simulate calling C compiler%_" % [colon-field-list(items)])


    ;Called to request that the auxfile be updated with the additional records.
    defmethod update-aux-file (this,
                               records:Tuple<AuxRecord>) -> False :
      println("Simulate updating aux file:")
      println(Indented("%n" % [records]))


;============================================================
;================== Dummy Structures ========================
;============================================================

defn try-link (cmdargs:CommandArgs) :
  val packages = map(to-symbol, cmdargs["packages"])
  val proj-files = cmdargs["proj"]
  val build-settings = BuildSettings(
    BuildPackages(packages, false),  ;inputs
    [],                              ;vm-packages
    `os-x,                           ;platform
    AsmFile("myprog.s", false)       ;assembly
    "myprog",                        ;output
    false,                           ;external-dependencies
    false,                           ;pkg-dir
    false,                           ;optimize?
    false,                           ;debug?
    [],                              ;ccfiles
    [],                              ;ccflags
    [],                              ;flags
    [])                              ;macro-plugins
  val comp-result = CompilationResult(
    packages  ;compiled-packages
    []        ;binding-packages
    []        ;package-stamps
    [])       ;output-pkgs
  val proj = read-example-proj(proj-files)
  val input = LinkerInput(build-settings,
                          comp-result,
                          proj,
                          AuxFile())
  link(input, LinkEnv())

;Launch!
simple-command-line-cli(false, commands, "link", false, false) where :
  val commands = [
    Command(
      "link", ZeroArg, false,
      [
       Flag("packages"
            AtLeastOneFlag
            RequiredFlag
            "the Stanza packages to link.")
       Flag("proj"
            AtLeastOneFlag
            RequiredFlag
            "the .proj files for the project.")
      ],
      "Simulate the actions of the linker.",
      try-link)]