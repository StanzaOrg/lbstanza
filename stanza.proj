include "examples/stanza.proj"
include "build-stanza.proj" 

package stz/line-noise-prompter requires :
  ccfiles:
    "build/linenoise.o"
    "build/ConvertUTF.o"
    "build/wcwidth.o"
    
compile file "build/linenoise.o" from "runtime/linenoise-ng/linenoise.cpp" :
  on-platform :
    os-x : "cc '{.}/runtime/linenoise-ng/linenoise.cpp' -c -o '{.}/build/linenoise.o' -O3"
    linux : "cc -std=c++11 '{.}/runtime/linenoise-ng/linenoise.cpp' -c -o '{.}/build/linenoise.o' -O3 -fPIC"
    windows : "gcc -std=c++11 '{.}\\runtime\\linenoise-ng\\linenoise.cpp' -c -o '{.}\\build\\linenoise.o' -O3"
    
compile file "build/ConvertUTF.o" from "runtime/linenoise-ng/ConvertUTF.cpp" :
  on-platform :
    os-x : "cc '{.}/runtime/linenoise-ng/ConvertUTF.cpp' -c -o '{.}/build/ConvertUTF.o' -O3"
    linux : "cc -std=c++11 '{.}/runtime/linenoise-ng/ConvertUTF.cpp' -c -o '{.}/build/ConvertUTF.o' -O3 -fPIC"
    windows : "gcc -std=c++11 '{.}\\runtime\\linenoise-ng\\ConvertUTF.cpp' -c -o '{.}\\build\\ConvertUTF.o' -O3"
    
compile file "build/wcwidth.o" from "runtime/linenoise-ng/wcwidth.cpp" :
  on-platform :
    os-x : "cc '{.}/runtime/linenoise-ng/wcwidth.cpp' -c -o '{.}/build/wcwidth.o' -O3"
    linux : "cc -std=c++11 '{.}/runtime/linenoise-ng/wcwidth.cpp' -c -o '{.}/build/wcwidth.o' -O3 -fPIC"
    windows : "gcc -std=c++11 '{.}\\runtime\\linenoise-ng\\wcwidth.cpp' -c -o '{.}\\build\\wcwidth.o' -O3"

package stz/vm requires :
  ccfiles: "build/cvm.o"

package stz/code-template-table requires :
  ccfiles: "compiler/exec-alloc.c"

compile file "build/cvm.o" from "compiler/cvm.c" :
  on-platform :
    os-x : "cc -std=gnu99 '{.}/compiler/cvm.c' -c -o '{.}/build/cvm.o' -O3 -D PLATFORM_OS_X"
    linux : "cc -std=gnu99 '{.}/compiler/cvm.c' -c -o '{.}/build/cvm.o' -O3 -D PLATFORM_LINUX -fPIC"
    windows : "gcc -std=gnu99 '{.}\\compiler\\cvm.c' -c -o '{.}\\build\\cvm.o' -O3 -D PLATFORM_WINDOWS"

package core/sha256 requires :
  ccfiles: "build/sha256.o"
compile file "build/sha256.o" from "core/sha256.c" :
  on-platform :
    os-x : "cc -std=gnu99 '{.}/core/sha256.c' -c -o '{.}/build/sha256.o' -O3"
    linux : "cc -std=gnu99 '{.}/core/sha256.c' -c -o '{.}/build/sha256.o' -O3 -fPIC"
    windows : "gcc -std=gnu99 '{.}\\core\\sha256.c' -c -o '{.}\\build\\sha256.o' -O3"

package core/threaded-reader requires :
  ccfiles: "core/threadedreader.c"

package core/dynamic-library requires :
  ccfiles: "core/dynamic-library.c"

package core/sighandler requires :
  ccfiles: "core/sighandler.c"
  ccflags:
    on-platform:
      os-x :
        "-D_XOPEN_SOURCE"
      else : ()

package stz/asmjit requires :
  ccflags:
    on-platform :
      os-x :
        "-L{.}/bin"
        "-lasmjit"
        "-lc++"
      linux :
        "-L{.}/bin"
        "-lasmjit"
        "-lstdc++"
        "-lrt"
      windows :
        "-L{.}/bin"
        "-lasmjit"
        "-lstdc++"

package stz/macro-plugin requires :
  ccfiles: "compiler/macro-handshake.c"
  ccflags: "-shared"

include "debug/stanza.proj"

build stanza-debugger :
  inputs: stz-debug/debugger-main
  pkg: "pkgs"
  o: "stanza-debugger"

build stanza-debug-adapter :
  inputs: stz-debug/debug-adapter
  pkg: "pkgs"
  o: "debug-adapter"