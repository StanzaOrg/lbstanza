defpackage stz-debug/debugger :
  import core
  import collections
  import reader
  import core/dynamic-library
  import core/safepoints
  import core/debug-table
  import core/sighandler
  import stz/line-noise-prompter
  import core/stack-trace
  import core/local-table

defn* command-loop (running?:True|False) -> False :
  let loop () :
    val tokens = read-line(LineNoisePrompter("debug> ", "     > "))
    match(tokens:List<Token>) :
      match-syntax(tokens) :
        (backtrace) :
          ;Check whether the program is running.
          if running? :
            ;Filter out core packages.
            defn no-core-packages (package:Symbol, sig:String|False) -> True|False :
              package != `core
            ;Print out the stack trace using the filter.
            print-stack-trace(current-output-stream(), stack-trace(app), no-core-packages)
          else :
            println("Program is not running.")
          ;Do not advance the program.
          loop()
        (safepoints) :
          print-safepoints()
          loop()
        (globals) :
          print-globals()
          loop()
        (locals ?ip-token ?sp-token) :
          val ip = unwrap-token(ip-token) as Long
          val sp = unwrap-token(sp-token) as Long
          print-locals(ip, sp)
          loop()
        (locals) :
          if running? :
            val ip = get-sighandler-instruction-address()
            val sp = stack-pointer(app)
            print-locals(ip, sp)
          else :
            println("Program is not running.")
          loop()
        (break ?filename ?line) :
          set-breakpoint(unwrap-token(filename) as String, unwrap-token(line) as Int)
          loop()
        (unbreak ?filename ?line) :
          clear-breakpoint(unwrap-token(filename) as String, unwrap-token(line) as Int)
          loop()
        (breakpoints) :
          breakpoints()
          loop()
        (continue) :
          if running? :
            continue()
          else :
            run()
        (step) :
          step()
          if running? == false :
            run()
        (next) :
          next()
          if running? == false :
            run()
        (stop) :
          if running? :
            println("Stopping the program.")
          quit()
        (quit) :
          quit()
        (help) :
          print-help(false)
          loop()
        (_ ...) :
          print-help("Unrecognized command.")
          loop()
    else :
      quit()

val help = [
  "Available commands:\n"
  "  backtrace\n"
  "  break \"source-file-name\" line\n"
  "  breakpoints\n"
  "  continue\n"
  "  globals\n"
  "  locals        ;topmost stack frame\n"
  "  locals ip sp\n"
  "  next\n"
  "  quit\n"
  "  step\n"
  "  stop\n"
  "  safepoints    ;necessary for debug-mode testing\n"
  "  unbreak \"source-file-name\" line\n"
  "  help\n"
  ]
defn print-help (msg:String|False) :
  match(msg:String) : println(msg)
  println-all(help)

defn run () :
  println("debug> Program finished wth completion code %_." % [run(app)])
defn quit () :
  println("Quitting.")
  exit(0)

lostanza defn print-safepoints () -> ref<False> :
  return dump-safepoint-table(app-safepoints())

lostanza defn set-breakpoint (filename:ref<String>, line:ref<Int>) -> ref<False> :
  return set-breakpoint(addr!(filename.chars), line.value)
lostanza defn set-breakpoint (filename:ptr<byte>, line:int) -> ref<False> :
  val entry = safepoint-entry(filename, line)
  if (entry != null) :
    if (find(active-safepoints, entry) != null) :
      call-c clib/printf("Breakpoint is already set at %s:%d\n", filename, line)
    else :
      insert(active-safepoints, entry)
      set-breakpoint(entry)
  return false

lostanza defn clear-breakpoint (filename:ref<String>, line:ref<Int>) -> ref<False> :
  return clear-breakpoint(addr!(filename.chars), line.value)
lostanza defn clear-breakpoint (filename:ptr<byte>, line:int) -> ref<False> :
  val entry = safepoint-entry(filename, line)
  if (entry != null) :
    val p = find(active-safepoints, entry)
    if (p == null) :
      call-c clib/printf("No breakpoint set at %s:%d\n", filename, line)
    else :
      [p] = null
      clear-breakpoint(entry)
  return false

lostanza defn safepoint-entry (filename:ptr<byte>, line:int) -> ptr<SafepointEntry> :
  val safepoints:ptr<FileSafepoints> = file-safepoints(app-safepoints(), filename)
  if (safepoints == null) :
    call-c clib/printf("No safepoints in %s\n", filename)
  else :
    for (var i:long = 0, i < safepoints.num-entries, i = i + 1) :
      val entry = addr(safepoints.entries[i])
      if entry.line == line : return entry
    call-c clib/printf("No safepoint at %s:%d\n", filename, line)
  return null

lostanza defn set-breakpoint (entry:ptr<SafepointEntry>) -> ref<False> :
  return write-breakpoint(entry, INSTRUCTION-INT3)
lostanza defn clear-breakpoint (entry:ptr<SafepointEntry>) -> ref<False> :
  return write-breakpoint(entry, INSTRUCTION-NOP)
lostanza defn write-breakpoint (entry:ptr<SafepointEntry>, inst:byte) -> ref<False> :
  call-c write_breakpoint(entry, inst)
  return false
lostanza val INSTRUCTION-INT3:byte = 0xCCY
lostanza val INSTRUCTION-NOP:byte = 0x90Y

extern Safepoints_enable : () -> int
extern Safepoints_disable : () -> int
extern write_breakpoint : (ptr<SafepointEntry>, byte) -> int

lostanza defn enable-all-safepoints () -> ref<False> :
  call-c Safepoints_enable()
  return false
lostanza defn disable-all-safepoints () -> ref<False> :
  if (call-c Safepoints_disable() != 0) :
    restore-active-safepoints()
  return false
lostanza defn restore-active-safepoints () -> ref<False> :
  return write(active-safepoints, INSTRUCTION-INT3)

lostanza defn breakpoints () -> ref<False> :
  val safepoints = app-safepoints()
  for (var i:long = 0, i < safepoints.num-files, i = i + 1) :
    breakpoints(safepoints.files[i])
  return false
lostanza defn breakpoints (safepoints:ptr<FileSafepoints>) -> ref<False> :
  for (var i:long = 0, i < safepoints.num-entries, i = i + 1) :
    val entry = addr(safepoints.entries[i])
    if (find(active-safepoints, entry) != null) :
      call-c clib/printf("Breakpoint at %s:%d\n", safepoints.filename, entry.line as int)
  return false

lostanza defn find-file (safepoints:ptr<SafepointTable>, entry:ptr<SafepointEntry>) -> ptr<FileSafepoints> :
  for (var i:long = 0, i < safepoints.num-files, i = i + 1) :
    val file = safepoints.files[i]
    val dist = entry - addr(file.entries)
    if (dist >= 0 and dist < (sizeof(SafepointEntry) * file.num-entries)) :
      return file
  return null
lostanza defn find (safepoints:ptr<SafepointTable>, ip:ptr<?>) -> ptr<SafepointEntry> :
  for (var i:long = 0, i < safepoints.num-files, i = i + 1) :
    val entry = find(safepoints.files[i], ip)
    if (entry != null) :
      return entry
  return null
lostanza defn find (safepoints:ptr<FileSafepoints>, ip:ptr<?>) -> ptr<SafepointEntry> :
  for (var i:long = 0, i < safepoints.num-entries, i = i + 1) :
    val entry = addr(safepoints.entries[i])
    if (find(entry, ip) != null) :
      return entry
  return null
lostanza defn find (entry:ptr<SafepointEntry>, ip:ptr<?>) -> ptr<SafepointAddress> :
  return find(entry.address-list, ip)
lostanza defn find (list:ptr<AddressList>, ip:ptr<?>) -> ptr<SafepointAddress> :
  for (var i:long = 0, i < list.length, i = i + 1) :
    val p = addr(list.addresses[i])
    if (p.address == ip) :
      return p
  return null

defn print-locals (ip:Long, sp:Long) :
  val ctxt = context(app-locals, ip)
  match(ctxt:VarContext) :
    val len = length(ctxt)
    if length(ctxt) == 0 :
      println("No named locals recorded.")
    else :
      for i in 0 to length(ctxt) do :
        print-local-variable(ctxt[i], sp)
  else :
    println("No locals recorded.")

defn print-globals () -> False :
  val table = app-globals
  for i in 0 to num-packages(table) do :
    val package-table = table[i]
    if name(package-table) != `core and num-entries(package-table) > 0 :
      println("Package %_" % [name(package-table)])
      for j in 0 to num-entries(package-table) do :
        print-global-variable(package-table[j])

lostanza defn print-local-variable (v:ref<NamedVar>, sp:ref<Long>) -> ref<False> :
  return print-variable(name(v), sp.value as ptr<long> + stack-offset(v).value)
lostanza defn print-global-variable (v:ref<DebugEntry>) -> ref<False> :
  return print-variable(to-string(name(v)), app-vms.global-mem as ptr<long> + offset(v).value)
lostanza defn print-variable (name:ref<String>, p:ptr<long>) -> ref<False> :
  val v = [p]
  return print-variable(name, type-of(v), string-of(v))
defn print-variable (name:String, type:String, value:String) :
  println("  var %_ : %_ = %_" % [name, type, value])

lostanza defn app-safepoints () -> ptr<SafepointTable> :
  return app_safepoint_table
extern set_SIGINT_handler : () -> int

;Debugger state
lostanza var app-vms : ptr<core/VMState>
var app-run : (() -> Int)
var app-exit : (() -> False)
var app-locals : LocalVarTable
var app-globals : DebugTable

extern app_safepoint_table : ptr<SafepointTable>

;Borrowed from core
lostanza val INT-TAG-BITS:long = 0L
lostanza val REF-TAG-BITS:long = 1L
lostanza val MARKER-TAG-BITS:long = 2L
lostanza val BYTE-TAG-BITS:long = 3L
lostanza val CHAR-TAG-BITS:long = 4L
lostanza val FLOAT-TAG-BITS:long = 5L

;Borrowed from debug-adapter
lostanza defn type-id (ref:long) -> long :
  val tagbits = ref & 0x7L
  if tagbits == INT-TAG-BITS : return tagof(Int)
  if tagbits == BYTE-TAG-BITS : return tagof(Byte)
  if tagbits == CHAR-TAG-BITS : return tagof(Char)
  if tagbits == FLOAT-TAG-BITS : return tagof(Float)
  if tagbits == MARKER-TAG-BITS : return ref >>> 3L ;Must be signed to make tagof(Void) negative
  if tagbits == REF-TAG-BITS : return [(ref - REF-TAG-BITS) as ptr<long>]
  return -2L

public lostanza defn type-of (v:long) -> ref<String> :
  val type-id = type-id(v)
  if type-id < 0 : return String("Unknown")
  if type-id == tagof(core/Box) : return type-of(unbox(v))
  return app-class-name(new Int{type-id as int})

lostanza defn untag (x:long) -> ptr<?> :
  #if-not-defined(OPTIMIZE) :
    val tagbits = x & 7L
    if tagbits != 1 : fatal("Not a heap-allocated object!")
  return (x - 1 + 8) as ptr<?>

;Recognized types ids must be registered in FIXED-TYPE-IDS
deftype RecognizedType :
  True <: RecognizedType
  False <: RecognizedType
  Byte <: RecognizedType
  Char <: RecognizedType
  Int <: RecognizedType
  Float <: RecognizedType
  Long <: RecognizedType
  Double <: RecognizedType
  String <: RecognizedType
  core/Box <: RecognizedType
  AppByteArray <: RecognizedType
  AppCharArray <: RecognizedType
  AppIntArray <: RecognizedType
  AppLongArray <: RecognizedType
  AppFloatArray <: RecognizedType
  AppDoubleArray <: RecognizedType
  AppTuple <: RecognizedType
  AppFullList <: RecognizedType
  core/NilList <: RecognizedType
  AppObject <: RecognizedType

lostanza defn unbox (v:long) -> long :
  return (untag(v) as ptr<core/Box>).item as long

lostanza defn value-of (v:long) -> ref<RecognizedType> :
  val type-id = type-id(v)
  if type-id == tagof(False) :
    return v as ref<False>
  if type-id == tagof(True) :
    return v as ref<True>
  if type-id == tagof(Byte) :
    return v as ref<Byte>
  if type-id == tagof(Char) :
    return v as ref<Char>
  if type-id == tagof(Int) :
    return v as ref<Int>
  if type-id == tagof(Float) :
    return v as ref<Float>
  if type-id == tagof(Long) :
    return Long(untag(v) as ptr<Long>)
  if type-id == tagof(Double) :
    return Double(untag(v) as ptr<Double>)
  if type-id == tagof(String) :
    return String(untag(v) as ptr<String>)
  if type-id == tagof(StringSymbol) :
    return String(untag(v) as ptr<StringSymbol>)
  if type-id == tagof(core/Box) :
    return value-of(unbox(v))
  if type-id == tagof(ByteArray) :
    return AppByteArray(v)
  if type-id == tagof(CharArray) :
    return AppCharArray(v)
  if type-id == tagof(IntArray) :
    return AppIntArray(v)
  if type-id == tagof(LongArray) :
    return AppLongArray(v)
  if type-id == tagof(FloatArray) :
    return AppFloatArray(v)
  if type-id == tagof(DoubleArray) :
    return AppDoubleArray(v)
  if type-id == tagof(Tuple) :
    return AppTuple(v)
  if type-id == tagof(core/FullList) :
    return AppFullList(v)
  if type-id == tagof(core/NilList) :
    return new core/NilList{}
  return AppObject(v)

defn to-source-string (c:Char) :
  to-string("%~" % [c])
defn to-source-string (s:String) :
  to-string("%~" % [s])
lostanza defn string-of (v:long) -> ref<String> :
  val type-id = type-id(v)
  if type-id == -1L : ;tagof(Void)
    return String("(uninitialized)")
  if type-id == tagof(False) :
    return to-string(v as ref<False>)
  if type-id == tagof(True) :
    return to-string(v as ref<True>)
  if type-id == tagof(Byte) :
    return to-string(v as ref<Byte>)
  if type-id == tagof(Char) :
    return to-source-string(v as ref<Char>)
  if type-id == tagof(Int) :
    return to-string(v as ref<Int>)
  if type-id == tagof(Float) :
    return to-string(v as ref<Float>)
  if type-id == tagof(Long) :
    return to-string(Long(untag(v) as ptr<Long>))
  if type-id == tagof(Double) :
    return to-string(Double(untag(v) as ptr<Double>))
  if type-id == tagof(String) :
    return to-source-string(String(untag(v) as ptr<String>))
  if type-id == tagof(StringSymbol) :
    return String(untag(v) as ptr<StringSymbol>)
  if type-id == tagof(core/Box) :
    return string-of(unbox(v))
  if type-id == tagof(ByteArray) :
    return to-string(AppByteArray(v))
  if type-id == tagof(CharArray) :
    return to-string(AppCharArray(v))
  if type-id == tagof(IntArray) :
    return to-string(AppIntArray(v))
  if type-id == tagof(LongArray) :
    return to-string(AppLongArray(v))
  if type-id == tagof(FloatArray) :
    return to-string(AppFloatArray(v))
  if type-id == tagof(DoubleArray) :
    return to-string(AppDoubleArray(v))
  if type-id == tagof(Tuple) :
    return to-string(AppTuple(v))
  if type-id == tagof(core/FullList) :
    return to-string(AppFullList(v))
  if type-id == tagof(core/NilList) :
    return to-string(new core/NilList{})
  return to-string(AppObject(v))

;Here ptr<t> is always a pointer to the app heap,
;so no allocations in the debugger heap can change it.
lostanza defn Long (p:ptr<Long>) -> ref<Long> :
  return new Long{p.value}
lostanza defn Double (p:ptr<Double>) -> ref<Double> :
  return new Double{p.value}
lostanza defn String (p:ptr<String>) -> ref<String> :
  return String(p.length - 1, addr!(p.chars))
lostanza defn String (p:ptr<StringSymbol>) -> ref<String> :
  return String(untag(p.name as long) as ptr<String>)

lostanza deftype AppByteArray <: IndexedCollection<Byte> & Unique :
  p:ptr<ByteArray>
lostanza defmethod length (a:ref<AppByteArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppByteArray>, i:ref<Int>) -> ref<Byte> :
  core/ensure-index-in-bounds(a, i)
  return new Byte{a.p.data[i.value]}
lostanza defn AppByteArray (v:long) -> ref<AppByteArray> :
  val p = untag(v) as ptr<ByteArray>
  return new AppByteArray{p}

lostanza deftype AppCharArray <: IndexedCollection<Char> & Unique :
  p:ptr<CharArray>
lostanza defmethod length (a:ref<AppCharArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppCharArray>, i:ref<Int>) -> ref<Char> :
  core/ensure-index-in-bounds(a, i)
  return new Char{a.p.chars[i.value]}
lostanza defn AppCharArray (v:long) -> ref<AppCharArray> :
  val p = untag(v) as ptr<CharArray>
  return new AppCharArray{p}

lostanza deftype AppIntArray <: IndexedCollection<Int> & Unique :
  p:ptr<IntArray>
lostanza defmethod length (a:ref<AppIntArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppIntArray>, i:ref<Int>) -> ref<Int> :
  core/ensure-index-in-bounds(a, i)
  return new Int{a.p.data[i.value]}
lostanza defn AppIntArray (v:long) -> ref<AppIntArray> :
  val p = untag(v) as ptr<IntArray>
  return new AppIntArray{p}

lostanza deftype AppLongArray <: IndexedCollection<Long> & Unique :
  p:ptr<LongArray>
lostanza defmethod length (a:ref<AppLongArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppLongArray>, i:ref<Int>) -> ref<Long> :
  core/ensure-index-in-bounds(a, i)
  return new Long{a.p.data[i.value]}
lostanza defn AppLongArray (v:long) -> ref<AppLongArray> :
  val p = untag(v) as ptr<LongArray>
  return new AppLongArray{p}

lostanza deftype AppFloatArray <: IndexedCollection<Float> & Unique :
  p:ptr<FloatArray>
lostanza defmethod length (a:ref<AppFloatArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppFloatArray>, i:ref<Int>) -> ref<Float> :
  core/ensure-index-in-bounds(a, i)
  return new Float{a.p.data[i.value]}
lostanza defn AppFloatArray (v:long) -> ref<AppFloatArray> :
  val p = untag(v) as ptr<FloatArray>
  return new AppFloatArray{p}

lostanza deftype AppDoubleArray <: IndexedCollection<Double> & Unique :
  p:ptr<DoubleArray>
lostanza defmethod length (a:ref<AppDoubleArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppDoubleArray>, i:ref<Int>) -> ref<Double> :
  core/ensure-index-in-bounds(a, i)
  return new Double{a.p.data[i.value]}
lostanza defn AppDoubleArray (v:long) -> ref<AppDoubleArray> :
  val p = untag(v) as ptr<DoubleArray>
  return new AppDoubleArray{p}

lostanza deftype AppTuple <: IndexedCollection<RecognizedType> & Unique :
  p:ptr<Tuple>
defn empty? (t:AppTuple) :
  length(t) == 0
lostanza defmethod length (t:ref<AppTuple>) -> ref<Int> :
  return new Int{t.p.length as int}
lostanza defmethod get (a:ref<AppTuple>, i:ref<Int>) -> ref<RecognizedType> :
  core/ensure-index-in-bounds(a, i)
  return value-of(a.p.items[i.value] as long)
lostanza defn AppTuple (v:long) -> ref<AppTuple> :
  val p = untag(v) as ptr<Tuple>
  return new AppTuple{p}

lostanza deftype AppFullList <: List :
  p:ptr<core/FullList>
lostanza defmethod head (x:ref<AppFullList>) -> ref<RecognizedType> :
  return value-of(x.p.head as long)
lostanza defmethod tail (x:ref<AppFullList>) -> ref<AppFullList|core/NilList> :
  val v = x.p.tail as long
  if (type-id(v) == tagof(core/FullList)) :
    return AppFullList(v)
  else :
    return new core/NilList{}
defmethod empty? (x:AppFullList) : false
lostanza defn AppFullList (v:long) -> ref<AppFullList> :
  val p = untag(v) as ptr<core/FullList>
  return new AppFullList{p}

lostanza deftype AppObject :
  p:long
lostanza defn type-of (o:ref<AppObject>) -> ref<String> :
  return type-of(o.p)
defmethod print (o:OutputStream, x:AppObject) :
  print(o, "[%_ object]" % [type-of(x)])
lostanza defn AppObject (v:long) -> ref<AppObject> :
  return new AppObject{v}

lostanza deftype SafepointEntrySet :
  var capacity: int
  var length: int
  var items: ptr<ptr<SafepointEntry>>
lostanza defn SafepointEntrySet () -> ptr<SafepointEntrySet> :
  val v:ptr<SafepointEntrySet> = call-c clib/malloc(sizeof(SafepointEntrySet))
  val capacity:int = 16
  v.capacity = capacity
  v.length = 0
  v.items = call-c clib/malloc(capacity * sizeof(ptr<?>))
  return v
lostanza defn free (v:ptr<SafepointEntrySet>) -> ref<False> :
  call-c clib/free(v.items)
  call-c clib/free(v)
  return false
lostanza defn find (v:ptr<SafepointEntrySet>, e:ptr<SafepointEntry>) -> ptr<ptr<SafepointEntry>> :
  var p:ptr<ptr<SafepointEntry>> = v.items
  val limit:ptr<ptr<SafepointEntry>> = p + (v.length * sizeof(ptr<?>))
  while (p < limit) :
    if ([p] == e) : return p
    p = p + sizeof(ptr<?>)
  return null
lostanza defn find-ip (v:ptr<SafepointEntrySet>, ip:ptr<?>) -> ptr<SafepointEntry> :
  var p:ptr<ptr<SafepointEntry>> = v.items
  val limit:ptr<ptr<SafepointEntry>> = p + (v.length * sizeof(ptr<?>))
  while (p < limit) :
    val entry = [p]
    if (entry != null and find(entry, ip) != null) :
      return entry
    p = p + sizeof(ptr<?>)
  return null
lostanza defn write (v:ptr<SafepointEntrySet>, instruction:byte) -> ref<False> :
  var p:ptr<ptr<SafepointEntry>> = v.items
  val limit:ptr<ptr<SafepointEntry>> = p + (v.length * sizeof(ptr<?>))
  while (p < limit) :
    val entry = [p]
    if (entry != null) :
      write-breakpoint(entry, instruction)
    p = p + sizeof(ptr<?>)
  return false
lostanza defn insert (v:ptr<SafepointEntrySet>, e:ptr<SafepointEntry>) -> ref<False> :
  val p:ptr<ptr<SafepointEntry>> = find(v, null)
  if (p != null) :
    [p] = e
  else :
    val length = v.length
    if length == v.capacity :
      val capacity:int = v.capacity << 1
      v.capacity = capacity
      v.items = core/realloc(v.items, capacity * sizeof(ptr<?>))
    v.items[length] = e
    v.length = length + 1
  return false
lostanza val active-safepoints:ptr<SafepointEntrySet> = SafepointEntrySet()

lostanza val RUN:byte  = 0Y
lostanza val STEP:byte = 1Y
lostanza val NEXT:byte = 2Y
extern run_mode:byte

lostanza var current-safepoint:ptr<SafepointEntry> = null
lostanza defn set-current-safepoint (entry:ptr<SafepointEntry>, msg:ptr<byte>) -> ref<False> :
  current-safepoint = entry
  val file = find-file(app-safepoints(), entry)
  if (file != null) :
    call-c clib/printf("%s at %s:%ld\n", msg, file.filename, entry.line)
  return false

lostanza defn continue () -> ref<False> :
  run_mode = RUN
  return disable-all-safepoints()
lostanza defn step () -> ref<False> :
  run_mode = STEP
  return enable-all-safepoints()
lostanza defn next () -> ref<False> :
  val current-coroutine-ptr = current-coroutine-ptr()
  if (current-coroutine-ptr != null) :
    val current-coroutine = [current-coroutine-ptr]
    val stepping-coroutine-ptr = stepping-coroutine-ptr()
    [stepping-coroutine-ptr] = current-coroutine
    stepping-safepoint = current-safepoint
    stepping-stack-depth = current-stack-depth(current-coroutine)
  run_mode = NEXT
  return enable-all-safepoints()

lostanza var stepping-safepoint:ptr<SafepointEntry>
lostanza var stepping-stack-depth:long

extern get_signal_handler_ip: () -> ptr<?>
extern get_signal_handler_sp: () -> ptr<?>

lostanza defn current-coroutine-ptr () -> ptr<ref<core/RawCoroutine>> :
  return app-vms.current-coroutine-ptr as ptr<ref<core/RawCoroutine>>
lostanza defn stepping-coroutine-ptr () -> ptr<ref<core/RawCoroutine>> :
  return app-vms.stepping-coroutine-ptr as ptr<ref<core/RawCoroutine>>

lostanza defn current-stack-depth (current_coroutine:ref<core/RawCoroutine>) -> long :
  val sp = call-c get_signal_handler_sp();
  if (sp == null) : return 0L
  return sp - current_coroutine.stack.frames

lostanza val COROUTINE-CLOSED:int = 1
lostanza defn when-paused-at-safepoint () -> ref<False> :
  val ip = call-c get_signal_handler_ip()
  val breakpoint = find-ip(active-safepoints, ip)
  if (breakpoint != null) :
    set-current-safepoint(breakpoint, "Hit breakpoint")
  else :
    if (run_mode == NEXT and stepping-safepoint != null) :
      val current-coroutine-ptr = current-coroutine-ptr()
      val stepping-coroutine-ptr = stepping-coroutine-ptr()
      if (current-coroutine-ptr != null) :
        val current-coroutine = [current-coroutine-ptr]
        val stepping-coroutine = [stepping-coroutine-ptr]
        if (current-coroutine == stepping-coroutine and stepping-coroutine != false) :
          if (stepping-coroutine.status.value != COROUTINE-CLOSED) :
            val stack-depth = current-stack-depth(stepping-coroutine)
            if (stack-depth >= stepping-stack-depth) :
              if (stack-depth > stepping-stack-depth) :
                return false
              if (find(stepping-safepoint, ip) != null) :
                return false
    val safepoint = find(app-safepoints(), ip)
    set-current-safepoint(safepoint, "Paused")
  forget-stepping-coroutine()
  stepping-safepoint = null
  command-loop(true)
  return false
lostanza defn forget-stepping-coroutine () -> ref<False> :
  val stepping-coroutine-ptr = stepping-coroutine-ptr() as ptr<ref<False>>
  if (stepping-coroutine-ptr != null) :
    [stepping-coroutine-ptr] = false
  return false

var app:App
defn app-state () : state(app)
defn app-class-name (id:Int) : class-name(app, id)

public deftype App
public lostanza deftype AppState :
  vms:ptr<core/VMState>
public defmulti state (app:App) -> AppState
public defmulti run (app:App) -> Int
public defmulti stack-trace (app:App) -> SingleStackTrace
public defmulti class-name (app:App, id:Int) -> String
public defmulti stack-pointer (app:App) -> Long

public defn debug (app:App) -> False :
  /app = app
  init()
  set-sighandler(when-paused-at-safepoint)
  println("Paused at entry")
  try :
    command-loop(false)
  catch (e:Exception) :
    println(e)
lostanza defn init () -> ref<False> :
  val vms = app-state().vms
  app-vms = vms
  app_safepoint_table = vms.safepoint-table ;Export safepoint table to native code
  app-locals = LocalVarTable(vms.local-var-table)
  app-globals = DebugTable(vms.debug-table)
  call-c set_SIGINT_handler()
  return false
